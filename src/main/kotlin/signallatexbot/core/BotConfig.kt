package signallatexbot.core

import com.google.crypto.tink.HybridEncrypt
import com.google.crypto.tink.KeyTemplates
import com.google.crypto.tink.KeysetHandle
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import signallatexbot.serialization.KeysetHandlePlaintextJsonSerializer

@Serializable
data class BotConfig(
    val accountId: String,
    val outputPhotoDirectory: String,
    @Serializable(KeysetHandlePlaintextJsonSerializer::class)
    val publicKeysetHandle: KeysetHandle,
    val avatarFilePath: String? = null
) {
    val hybridEncrypt by lazy { publicKeysetHandle.getPrimitive(HybridEncrypt::class.java) }

    @Serializable
    private data class ExampleConfig(
        val accountId: String = "<signald account ID for the bot>",
        val outputPhotoDirectory: String = "<output photo directory for LaTeX images>",
        val publicKeysetHandle: String = "<public key as generated by the update-config command>",
        val avatarFilePath: String = "<optional path to avatar file>"
    )

    fun encryptWithPublicKey(stringToEncrypt: String, contextInfo: ByteArray = ByteArray(0)): ByteArray {
        return hybridEncrypt.encrypt(stringToEncrypt.encodeToByteArray(), contextInfo)!!
    }

    companion object {
        val EXAMPLE_CONFIG: String by lazy {
            val prettyJson = Json { prettyPrint = true }
            prettyJson.encodeToString(ExampleConfig.serializer(), ExampleConfig())
        }

        fun generatePrivateKeysetHandle(): KeysetHandle {
            return KeysetHandle.generateNew(KeyTemplates.get("ECIES_P256_COMPRESSED_HKDF_HMAC_SHA256_AES128_GCM"))
        }
    }
}
